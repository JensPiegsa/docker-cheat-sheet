{
  "name": "Docker Cheat Sheet",
  "tagline": "Read, Copy and Paste, Anywhere.",
  "body": "[![Donate](https://img.shields.io/badge/Donate-PayPal-blue.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=WZJTZ3V8KKARC)\r\n\r\n# Docker Cheat Sheet ##\r\n\r\n## Docker Client ##\r\n\r\n### Creating Images ###\r\n\r\n#### Debug image build ####\r\n\r\n* `docker build` shows the IDs of all temporary containers and intermediate images\r\n* use `docker run -it image_id` with the ID of the image resulting from the last successful build step and try the next command manually\r\n\r\n### Running Containers ###\r\n\r\n#### Start container and run command inside\r\n    docker run -it ubuntu:14.04 /bin/bash\r\n\r\n#### Start a shell in a running container\r\n    docker exec -it <container_id> /bin/bash\r\n\r\n#### Stop all running containers\r\n    docker stop $(docker ps -q)\r\n\r\n#### Remove all stopped containers, except those suffixed '-data':\r\n\r\n```sh\r\ndocker ps -a -f status=exited | grep -v '\\-data *$'| awk '{if(NR>1) print $1}' | xargs -r docker rm\r\n```\r\n\r\n#### Remove all stopped containers (warning: removes data-only containers too)\r\n    docker rm $(docker ps -qa -f status=exited)\r\n\r\n#### Remove all unused images\r\n    docker rmi $(docker images -qa -f dangling=true)\r\n\r\n#### Show image history of container\r\n\r\n```sh\r\ndocker history --no-trunc=true $(docker inspect -f '{{.Image}}' CONTAINER)\r\n```\r\n\r\n#### Show file system changes\r\n\r\n```sh\r\ndocker diff CONTAINER\r\n```\r\n\r\n#### Backup volume\r\n```sh\r\ndocker run -rm --volumes-from yourcontainer -v $(pwd):/backup busybox tar cvf /backup/backup.tar /data\r\n```\r\n\r\n#### Restore volume\r\n    docker run -rm --volumes-from yournewcontainer -v $(pwd):/backup busybox tar xvf /backup/backup.tar\r\n\r\n#### Show volumes\r\n    docker inspect -f '{{range $v, $h := .Config.Volumes}}{{$v}}{{end}}' oc-data\r\n\r\n#### Start all paused / stopped containers\r\n    makes no sense together with container linkage or data-only containers\r\n\r\n#### Remove all containers and images\r\n    docker stop $(docker ps -q) && docker rm $(docker ps -qa) && docker rmi $(docker images -qa)\r\n\r\n#### Edit and update a file in a container\r\n\r\n```sh\r\ndocker cp CONTAINER:FILE /tmp/ && docker run --name=nano -it --rm -v /tmp:/tmp piegsaj/nano nano /tmp/FILE\r\ncat /tmp/FILE | docker exec -i CONTAINER sh -c 'cat > FILE'\r\nrm /tmp/FILE\r\n```\r\n\r\n#### Deploy war file to Apache Tomcat server instantly\r\n    docker run -i -t -p 80:8080 -e WAR_URL=“http://web-actions.googlecode.com/files/helloworld.war” bbytes/tomcat7\r\n\r\n#### Dump a Postgres database into your current directory on the host\r\n\r\n``` sh\r\necho \"postgres_password\" | sudo docker run -i --rm --link db:db -v $PWD:/tmp postgres:8 sh -c \\\r\n'pg_dump -h ocdb -p $OCDB_PORT_5432_TCP_PORT -U postgres -F tar -v openclinica > /tmp/ocdb_pg_dump_$(date +%Y-%m-%d_%H-%M-%S).tar'\r\n```\r\n\r\n#### Backup data folder\r\n    sudo docker run --rm --volumes-from oc-data -v $PWD:/tmp piegsaj/openclinica tar cvf /tmp/oc_data_backup_$(date +%Y-%m-%d_%H-%M-%S).tar /tomcat/openclinica.data\r\n\r\n#### Restore volume from data-only container\r\n    docker run --rm --volumes-from oc-data2 -v $pwd:/tmp piegsaj/openclinica tar xvf /tmp/oc_data_backup_*.tar\r\n\r\n#### Copy content of existing named volume to a new named volume\r\n\r\n```sh\r\ndocker volume create --name vol_b\r\ndocker run --rm -v vol_a:/source/folder -v vol_b:/target/folder -it rawmind/alpine-base:0.3.4 cp -r /source/folder /target\r\n```\r\n\r\n#### Get the IP address of a container\r\n\r\n    docker inspect container_id | grep IPAddress | cut -d '\"' -f 4\r\n\r\n## Docker Machine ##\r\n\r\n#### Get the IP address of VM for access from host ####\r\n\r\n    docker-machine ip default\r\n\r\n#### Add persistent environment variable to boot2docker\r\n\r\n```sh\r\nsudo echo 'echo '\\''export ENVTEST=\"Hello Env!\"'\\'' > /etc/profile.d/custom.sh' | \\\r\nsudo tee -a /var/lib/boot2docker/profile > /dev/null\r\n```\r\n\r\nand restart with `docker-machine restart default`\r\n\r\n#### Install additional linux packages in boot2docker\r\n\r\n* create the file `/var/lib/boot2docker/bootsync.sh` with a content like:\r\n\r\n```\r\n#!/bin/sh\r\nsudo /bin/su - docker -c 'tce-load -wi nano'\r\n```\r\n\r\n#### Recreate any folders and files on boot2docker startup\r\n\r\n* store folders / files in `/var/lib/boot2docker/restore-on-boot` and\r\n* create the file `/var/lib/boot2docker/bootsync.sh` with a content like:\r\n\r\n```\r\n#!/bin/sh\r\nsudo mkdir -p /var/lib/boot2docker/restore-on-boot &&\r\nsudo rsync -a /var/lib/boot2docker/restore-on-boot/ /\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}