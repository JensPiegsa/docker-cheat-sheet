{
  "name": "Docker Cheat Sheet",
  "tagline": "Find, Copy and Paste, Anywhere.",
  "body": "[![Donate](https://img.shields.io/badge/Donate-PayPal-blue.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=WZJTZ3V8KKARC) [![Fork on GitHub](https://img.shields.io/github/forks/badges/shields.svg?style=flat&label=Fork%20on%20GitHub&color=blue)](https://github.com/JensPiegsa/docker-cheat-sheet/edit/master/README.md#fork-destination-box)\r\n\r\n# Content\r\n\r\n* [Terminology](#terminology)\r\n* [How-tos](#how-tos)\r\n\t* [Docker Engine](#docker-engine)\r\n\t   * [Building Images](#building-images)\r\n\t   * [Running Containers](#running-containers)\r\n\t   * [Using Volumes](#using-volumes)\r\n\t* [Docker Machine](#docker-machine)\r\n\t* [Dockerfile](#dockerfile)\r\n* [Best Practices](#best-practices)\r\n* [Additional Material](#additional-material)\r\n\r\n# Terminology\r\n\r\n* **Image**\r\n* **Container**\r\n* **Volume**\r\n* **Network**\r\n* **Service**\r\n\r\n# How-tos\r\n\r\n## Docker Engine\r\n\r\n### Building Images\r\n\r\n#### Debug image build\r\n\r\n* `docker build` shows the IDs of all temporary containers and intermediate images\r\n* use `docker run -it IMAGE_ID` with the ID of the image resulting from the last successful build step and try the next command manually\r\n\r\n### Running Containers\r\n\r\n#### Start container and run command inside\r\n    docker run -it ubuntu:14.04 /bin/bash\r\n\r\n#### Start a shell in a running container\r\n    docker exec -it CONTAINER /bin/bash\r\n\r\n#### Stop all running containers\r\n    docker stop $(docker ps -q)\r\n\r\n#### Remove all stopped containers, except those suffixed '-data':\r\n\r\n\r\n    docker ps -a -f status=exited | grep -v '\\-data *$'| awk '{if(NR>1) print $1}' | xargs -r docker rm\r\n\r\n\r\n#### Remove all stopped containers (warning: removes data-only containers too)\r\n\r\n\r\n    docker rm $(docker ps -qa -f status=exited)\r\n\r\n\r\n* *note: the filter flag `-f status=exited` may be omitted here since running containers can not be removed*\r\n\r\n#### Remove all unused images\r\n\r\n\r\n    docker rmi $(docker images -qa -f dangling=true)\r\n\r\n\r\n#### Show image history of container\r\n\r\n\r\n    docker history --no-trunc=true $(docker inspect -f '{{.Image}}' CONTAINER)\r\n\r\n\r\n#### Show file system changes compared to the original image\r\n\r\n\r\n    docker diff CONTAINER\r\n\r\n\r\n#### Backup volume\r\n\r\n\r\n    docker run -rm --volumes-from SOURCE_CONTAINER -v $(pwd):/backup busybox \\\r\n     tar cvf /backup/backup.tar /data\r\n\r\n\r\n#### Restore volume\r\n    docker run -rm --volumes-from TARGET_CONTAINER -v $(pwd):/backup busybox tar xvf /backup/backup.tar\r\n\r\n#### Show volumes\r\n    docker inspect -f '{{range $v, $h := .Config.Volumes}}{{$v}}{{end}}' CONTAINER\r\n\r\n#### Start all paused / stopped containers\r\n\r\n* makes no sense together with container dependencies\r\n\r\n#### Remove all containers and images\r\n    docker stop $(docker ps -q) && docker rm $(docker ps -qa) && docker rmi $(docker images -qa)\r\n\r\n#### Edit and update a file in a container\r\n\r\n\r\n    docker cp CONTAINER:FILE /tmp/ && docker run --name=nano -it --rm -v /tmp:/tmp \\\r\n     piegsaj/nano nano /tmp/FILE ; \\\r\n    cat /tmp/FILE | docker exec -i CONTAINER sh -c 'cat > FILE' ; \\\r\n    rm /tmp/FILE\r\n\r\n\r\n#### Deploy war file to Apache Tomcat server instantly\r\n\r\n\r\n    docker run -i -t -p 80:8080 -e WAR_URL=“<http://web-actions.googlecode.com/files/helloworld.war>” \\\r\n     bbytes/tomcat7\r\n\r\n\r\n#### Dump a Postgres database into your current directory on the host\r\n\r\n\r\n    echo \"postgres_password\" | sudo docker run -i --rm --link db:db -v $PWD:/tmp postgres:8 sh -c ' \\\r\n     pg_dump -h ocdb -p $OCDB_PORT_5432_TCP_PORT -U postgres -F tar -v openclinica \\\r\n     > /tmp/ocdb_pg_dump_$(date +%Y-%m-%d_%H-%M-%S).tar'\r\n\r\n\r\n#### Backup data folder\r\n\r\n\r\n    docker run --rm --volumes-from oc-data -v $PWD:/tmp piegsaj/openclinica \\\r\n     tar cvf /tmp/oc_data_backup_$(date +%Y-%m-%d_%H-%M-%S).tar /tomcat/openclinica.data\r\n\r\n\r\n#### Restore volume from data-only container\r\n\r\n\r\n    docker run --rm --volumes-from oc-data2 -v $pwd:/tmp piegsaj/openclinica \\\r\n     tar xvf /tmp/oc_data_backup_*.tar\r\n\r\n\r\n#### Copy content of existing named volume to a new named volume\r\n\r\n\r\n    docker volume create --name vol_b\r\n    docker run --rm -v vol_a:/source/folder -v vol_b:/target/folder -it \\\r\n     rawmind/alpine-base:0.3.4 cp -r /source/folder /target\r\n\r\n\r\n#### Get the IP address of a container\r\n\r\n    docker inspect container_id | grep IPAddress | cut -d '\"' -f 4\r\n\r\n## Using Volumes\r\n\r\n#### Declare a volume via Dockerfile\r\n\r\n\r\n    RUN mkdir /data && echo \"some content\" > /data/file && chown -R daemon:daemon /data\r\n    VOLUME /data\r\n\r\n\r\n* *note: after the `VOLUME` directive, its content can not be changed within the Dockerfile*\r\n\r\n\r\n#### Create a volume at runtime\r\n    docker run -it -v /data debian /bin/bash\r\n\r\n#### Create a volume at runtime bound to a host directory\r\n    docker run --rm -v /tmp:/data debian ls -RAlph /data\r\n\r\n#### Create a named volume and use it\r\n\r\n\r\n    docker volume create --name=test\r\n    docker run --rm -it -v test:/data alpine sh -c 'echo \"Hello named volumes\" > /data/hello.txt'\r\n    docker run --rm -it -v test:/data alpine sh -c 'cat /data/hello.txt'\r\n\r\n\r\n#### Copy a file from host to named volume\r\n\r\n\r\n    echo \"debug=true\" > test.cnf && \\\r\n    docker volume create --name=conf && \\\r\n    docker run --rm -it -v $(pwd):/src -v conf:/dest alpine cp /src/test.cnf /dest/ && \\\r\n    rm -f test.cnf && \\\r\n    docker run --rm -it -v conf:/data alpine cat /data/test.cnf\r\n\r\n\r\n#### List the content of a volume\r\n    docker run --rm -v data:/data alpine ls -RAlph /data\r\n\r\n## Docker Machine\r\n\r\n### On a local VM\r\n\r\n#### Get the IP address of the virtual machine for access from host\r\n\r\n    docker-machine ip default\r\n\r\n#### Add persistent environment variable to boot2docker\r\n\r\n\r\n    sudo echo 'echo '\\''export ENVTEST=\"Hello Env!\"'\\'' > /etc/profile.d/custom.sh' | \\\r\n    sudo tee -a /var/lib/boot2docker/profile > /dev/null\r\n\r\n\r\nand restart with `docker-machine restart default`\r\n\r\n#### Install additional linux packages in boot2docker\r\n\r\n* create the file `/var/lib/boot2docker/bootsync.sh` with a content like:\r\n\r\n```\r\n#!/bin/sh\r\nsudo /bin/su - docker -c 'tce-load -wi nano'\r\n```\r\n\r\n#### Recreate any folders and files on boot2docker startup\r\n\r\n* store folders / files in `/var/lib/boot2docker/restore-on-boot` and\r\n* create the file `/var/lib/boot2docker/bootsync.sh` with a content like:\r\n\r\n```\r\n#!/bin/sh\r\nsudo mkdir -p /var/lib/boot2docker/restore-on-boot &&\r\nsudo rsync -a /var/lib/boot2docker/restore-on-boot/ /\r\n```\r\n\r\n## Dockerfile\r\n\r\n#### Add a periodic health check\r\n\r\n```\r\nHEALTHCHECK --interval=1m --timeout=3s --retries=5 \\\r\n CMD curl -f <http://localhost/> || exit 1\r\n```\r\n\r\n* see also: [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#/healthcheck)\r\n\r\n# Best Practices\r\n\r\n## Docker Engine\r\n\r\n* `docker exec` is your friend in development, but should be avoided in a production setup\r\n\r\n## Volumes\r\n\r\n* use *named volumes* to simplify maintenance by separating persistent data from the container and communicating the structure of a project in a more transparent manner\r\n\r\n## Dockerfile\r\n\r\n* use `ENTRYPOINT` and `CMD` directives together to make container usage more convenient\r\n* combine consecutive `RUN` directives with `&&` to reduce the costs of a build and to avoid caching of instructions like `apt-get update`\r\n* use `EXPOSE` to document all needed ports\r\n\r\n# Additional Material\r\n\r\n* [Mouat, A. (2015). *Using Docker: Developing and Deploying Software with Containers.* O'Reilly Media.](http://shop.oreilly.com/product/0636920035671.do) ([German Edition: *Docker. Software entwickeln und deployen mit Containern.* dpunkt.verlag](https://www.dpunkt.de/buecher/12553/9783864903847-docker.html))\r\n* [Official Docker Documentation](https://docs.docker.com/)\r\n* [StackOverflow Documentation](http://stackoverflow.com/documentation/docker/topics)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}